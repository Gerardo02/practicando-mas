// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, created_at, updated_at, user_oauth_id, name, email) VALUES($1, $2, $3, $4, $5, $6)
`

type CreateUserParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	UserOauthID string
	Name        string
	Email       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserOauthID,
		arg.Name,
		arg.Email,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, user_oauth_id, name, email FROM users WHERE user_oauth_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userOauthID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userOauthID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserOauthID,
		&i.Name,
		&i.Email,
	)
	return i, err
}
